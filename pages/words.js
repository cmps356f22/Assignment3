import styled from "@emotion/styled";
import { Search } from "@mui/icons-material";
import {
  Chip,
  CircularProgress,
  IconButton,
  InputAdornment,
  TextField,
} from "@mui/material";
import Head from "next/head";
import styles from "../styles/Home.module.css";
import axios from "axios";
import { useQuery } from "react-query";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { useWords } from "../zust/store";

const CssTextField = styled(TextField)({
  "& label.Mui-focused": {
    color: "#036ffc",
  },
  "& label": {
    color: "grey",
  },
  "& .MuiInput-underline:after": {
    borderBottomColor: "grey",
  },
  "& .MuiInputBase-input": {
    color: "white",
  },
  "& .MuiOutlinedInput-root": {
    "& fieldset": {
      borderColor: "grey",
      borderRadius: 10,
    },
    "&:hover fieldset": {
      borderColor: "#036ffc",
    },
    "&.Mui-focused fieldset": {
      borderColor: "#036ffc",
    },
  },
});

export default function Home() {
  var router = useRouter();
  var query = router.query["query"];

  const [input, setInput] = useState("");

  const { data, isLoading, isError } = useQuery(["sugs", query], () =>
    fetchSug(query)
  );
  const { data: wD, isLoading: wordsLoading } = useQuery(["words", query], () =>
    fetchWords(query)
  );

  const [sugData, setSugData] = useState([]);
  const [wordsData, setWordsData] = useState([]);

  const storedWords = useWords((state) => state.words);
  const addWord = useWords((state) => state.addWord);
  const setWords = useWords((state) => state.setWords);
  const deleteWord = useWords((state) => state.deleteWord);

  console.log("words", storedWords);

  useEffect(() => {
    let wordsList = JSON.parse(localStorage.getItem("words"));
    setWords(wordsList ? wordsList : []);
  }, []);

  useEffect(() => {
    if (data) {
      setSugData(data);
    }
  }, [data]);

  useEffect(() => {
    if (wD && query) {
      setWordsData(wD);
    } else {
      setWordsData([]);
    }
  }, [wD, query]);

  useEffect(() => {
    if (input) {
      router.push(`/words?query=${input}`);
    } else {
      router.push(`/words`);
    }
  }, [input]);

  const fetchSug = async (id) => {
    try {
      const { data } = await axios.get(`https://api.datamuse.com/sug?s=${id}`);
      return data;
    } catch (error) {
      console.log(error);
    }
  };

  const fetchWords = async (id) => {
    try {
      const { data } = await axios.get(
        `https://api.datamuse.com/words?ml=${id}`
      );
      return data;
    } catch (error) {
      console.log(error);
    }
  };

  console.log(sugData, wordsData);

  const onDelete = (word) => {
    deleteWord(word);
  };

  const searchSaved = (word) => {
    setInput(word);
  };

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main}>
        <div className={styles.header}>
          <CssTextField
            label="Search"
            type="search"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            id="outlined-start-adornment"
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <IconButton aria-label="toggle password visibility">
                    <Search htmlColor="white" />
                  </IconButton>
                </InputAdornment>
              ),
            }}
          />
          {isLoading ? (
            <div
              style={{
                marginLeft: 10,
              }}
            >
              <CircularProgress />
            </div>
          ) : (
            <div className={styles.sugContainer}>
              {sugData.map((sug, index) => (
                <div onClick={() => setInput(sug.word)} key={index}>
                  <Chip
                    className={styles.sug}
                    label={sug.word}
                    variant="outlined"
                  />
                </div>
              ))}
            </div>
          )}
        </div>
        <div className={styles.savedWords}>
          {storedWords
            .sort((a, b) => a.localeCompare(b))
            .map((word, index) => (
              <Chip
                className={styles.storedWord}
                key={index}
                label={word}
                variant="outlined"
                onClick={() => searchSaved(word)}
                onDelete={() => onDelete(word)}
              />
            ))}
        </div>
        {wordsLoading && (
          <div
            style={{
              marginTop: 10,
            }}
          >
            <CircularProgress />
          </div>
        )}
        <div>
          {wordsData.length > 0 && (
            <table className={styles.table}>
              <thead>
                <tr>
                  <th colSpan={2}>Word</th>
                  <th colSpan={1}>Score</th>
                  <th colSpan={4}>Tags</th>
                </tr>
              </thead>
              <tbody>
                {wordsData.map((wordData, index) => (
                  <tr
                    className={styles.rowData}
                    key={index}
                    onClick={() => addWord(wordData.word)}
                  >
                    <td
                      colSpan={2}
                      style={{
                        color: "#b2bac2",
                      }}
                    >
                      {wordData.word}
                    </td>
                    <td
                      colSpan={1}
                      style={{
                        color: "#b2bac2",
                      }}
                    >
                      {wordData.score
                        .toLocaleString("en-de")
                        .split(".")
                        .join(",")}
                    </td>
                    <td colSpan={4}>
                      <div className={styles.chipContainer}>
                        {/* relative_type:primary_rel */}
                        {wordData.tags?.map((tag, index) => {
                          let tempTag = tag.split(":");
                          if (tempTag.length === 2) {
                            return (
                              <Chip
                                className={styles.success_chip}
                                key={index}
                                label={tempTag[1]}
                                variant="outlined"
                              />
                            );
                          }
                          return (
                            <Chip
                              className={styles.chip}
                              key={index}
                              label={tag}
                              variant="outlined"
                            />
                          );
                        })}
                      </div>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          )}
        </div>
      </main>
    </>
  );
}
